From 65a50a867f384d5175fb7ff82eebda6e5906832d Mon Sep 17 00:00:00 2001
From: Gautham <ngautham.varma@gmail.com>
Date: Tue, 30 Jun 2020 15:54:57 +0530
Subject: [PATCH] Fixed file

---
 cd                 |  0
 datafeed/server.py |  8 ++++----
 src/App.tsx        | 23 ++++++++++++++++++-----
 src/Graph.tsx      | 18 ++++++++++++++----
 4 files changed, 36 insertions(+), 13 deletions(-)
 create mode 100644 cd

diff --git a/cd b/cd
new file mode 100644
index 0000000..e69de29
diff --git a/datafeed/server.py b/datafeed/server.py
index 2ffad43..0431336 100644
--- a/datafeed/server.py
+++ b/datafeed/server.py
@@ -214,7 +214,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print 'HTTP server started on port 8080'
+    print ('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
@@ -262,7 +262,7 @@ class App(object):
                 yield t, bids, asks
 
     def read_10_first_lines(self):
-        for _ in xrange(10):
+        for _ in range(10):
             self._data_1.next()
             self._data_2.next()
 
@@ -274,7 +274,7 @@ class App(object):
         t1, bids1, asks1 = self._current_book_1.next()
         t2, bids2, asks2 = self._current_book_2.next()
         t = t1 if t1 > t2 else t2
-        print 'Query received @ t%s' % t
+        print ('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -308,6 +308,6 @@ class App(object):
 
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print "No data found, generating..."
+        print ("No data found, generating...")
         generate_csv()
     run(App())
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..908d969 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+   if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+      let x=0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+          this.setState({
+            data: serverResponds,
+            showGraph: true,
+          });
+        });
+        x++;
+        if (x>1000) {
+           clearInterval(interval);
+        }
+      },100);
   }
 
+
   /**
    * Render the App react component
    */
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..8f4ef87 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -46,9 +46,19 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
-      // Add more Perspective configurations here.
       elem.load(this.table);
+      // Add more Perspective configurations here.
+      //ADDED some attributes such as view columnpivots rowpivots columns and aggregates
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+          {"stock":"distinct count",
+          "top_ask_price":"avg",
+          "top_bid_price":"avg",
+          "timestamp":"distinct count"}`);
+     
     }
   }
 
-- 
2.26.2.windows.1

